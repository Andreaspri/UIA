import math
import random

# The whole point of this function is to make modulus of large numbers faster if they have a high power

def mod(a, k, n):
    """
    :param a: value
    :param k: power
    :param n: modulus value
    :return: (a^k) % n
    """

    a %= n
    odd_list = []
    while k > 1:
        # If k is odd we need to store the extra number in a list
        # Example:
        # 3**3 = 3 * 3 * 3
        # I want to multiply the pairs together but the last 3 is alone
        # So in order to divide k by 2 i need to remove the last number (3) from the "list"
        if k % 2 == 1:
            odd_list.append(a)
            # Removing 1 from k because i moved a number to the odd_list
            k -= 1

        # Dividing k by 2 to halve the even list
        k = k // 2
        # Multiplying a with itself and taking modulus n of it
        a = (a * a) % n


    # Now we need to multiply in the numbers that we removed earlier
    while odd_list:
        a = (a * odd_list.pop()) % n

    return a


def old_mod(a, k, n):
    temp = a % n
    while k > 1:
        temp = (a * temp) % n
        k -= 1

    return temp


def phi_of_n(p, q):
    return (p - 1) * (q - 1)


def random_x(n):
    x = random.randint(n // 2, n)
    if math.gcd(x, n) == 1:
        return x
    else:
        return random_x(n)


def calculate_y(x, n):
    a = 1
    b = 0
    c = 0
    d = 1

    while x != n:

        if x < n:
            temp = n // x
            if n - x * temp == 0:
                temp = 1
            n -= x * temp
            c -= a * temp
            d -= b * temp
        else:
            temp = x // n
            if x - n * temp == 0:
                temp = 1
            x -= n * temp
            a -= c * temp
            b -= d * temp
    if x > 1 or n > 1:
        print("The gcd of x and n is not 1")
    return a


def main(value, p, q):
    n = p * q
    print(f"n is: {n}")

    phi_n = phi_of_n(p, q)

    x = random_x(phi_n)

    y = calculate_y(x, phi_n)

    print(f"x value is: {x}, y value is: {y}")

    encrypted = mod(value, x, n)

    print(f"encrypted value is: {encrypted}")

    decrypted = mod(encrypted, y, n)

    print(f"decrypted value is: {decrypted}")


if __name__ == '__main__':
    main(123091275,
         10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453,
         999999999999999999999999999999999999999999999999999999999999999999200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000377)

